UA_dummy = rep(0,nrow(CancelledFlights))
AA_dummy[UniqueCarrier == "AA"] = 1
AA_dummy[UniqueCarrier == "AA"] = 1
DL_dummy[UniqueCarrier == "DL"] = 1
UA_dummy[UniqueCarrier == "UA"] = 1
CancelledFlights$AA_dummy = AA_dummy
CancelledFlights$AA_dummy = AA_dummy
CancelledFlights$DL_dummy = DL_dummy
CancelledFlights$UA_dummy = UA_dummy
View(CancelledFlights)
glm.fit = glm(Canceled ~ ., data = CancelledFlights, family = binomial)
summary(glm.fit)
coef(glm.fit)
library(MASS)
library(MASS)
library(MASS)
# Reading the data
CancelledFlights <- read.csv(file="CancelledFlights.csv",head=FALSE,sep=",")
# adding column names
colnames(CancelledFlights) <- c("Canceled","Month","DepartureTime","UniqueCarrier","SchedElapsedTime","ArrDelay","DepDelay","Distance")
# Reading first few columns
head(CancelledFlights)
# checking if there is any na data
sum(is.na(CancelledFlights))
attach(CancelledFlights)
# some data exploration
table(Month,Canceled)
par(mfrow = c(1,2))
cancel_month <- table(Canceled,Month)
barplot(cancel_month, col=c("darkblue","red"),legend = rownames(cancel_month))
cancel_unique_carrier <- table(Canceled,UniqueCarrier)
barplot(cancel_unique_carrier, col=c("darkblue","red"),legend = rownames(cancel_unique_carrier))
# AA_dummy = rep(0,nrow(CancelledFlights))
# DL_dummy = rep(0,nrow(CancelledFlights))
# UA_dummy = rep(0,nrow(CancelledFlights))
#
#
# AA_dummy[UniqueCarrier == "AA"] = 1
# DL_dummy[UniqueCarrier == "DL"] = 1
# UA_dummy[UniqueCarrier == "UA"] = 1
#
# CancelledFlights$AA_dummy = AA_dummy
# CancelledFlights$DL_dummy = DL_dummy
# CancelledFlights$UA_dummy = UA_dummy
#View(CancelledFlights)
glm.fit = glm(Canceled ~ ., data = CancelledFlights, family = binomial)
summary(glm.fit)
coef(glm.fit)
lda.fit = lda(Canceled ~ ., data = CancelledFlights)
summary(lda.fit)
lda.fit
CancelledFlights[-1,]
glm.fit = glm(Canceled ~ ., data = CancelledFlights[-1,], family = binomial)
summary(glm.fit)
predict.glm(glm.fit, CancelledFlights[1, ], type = "response")
predict.glm(glm.fit, CancelledFlights[1, ], type = "response") == CancelledFlights[1,]$Canceled
glm.fit
error_vec = rep(0,nrow(CancelledFlights))
error_vec = rep(0,nrow(CancelledFlights))
for (i in 1:dim(CancelledFlights)[1] ){
glm.fit = glm.fit = glm(Canceled ~ ., data =CancelledFlights[-i,],family = binomial)
pos_prob = predict(glm.fit, CancelledFlights[i,],type = "response")
if(pos_prob > 0.5)
{
predicted_value = 1
}else{
predicted_value = 0
}
if(predicted_value!=CancelledFlights[i,]$Direction) {
error_vec[i] = 1
}
}
mean(error_vec)
error_vec = rep(0,nrow(CancelledFlights))
for (i in 1:dim(CancelledFlights)[1] ){
glm.fit = glm.fit = glm(Canceled ~ ., data =CancelledFlights[-i,],family = binomial)
pos_prob = predict(glm.fit, CancelledFlights[i,],type = "response")
if(pos_prob > 0.5)
{
predicted_value = 1
}else{
predicted_value = 0
}
if(predicted_value!=CancelledFlights[i,]$Canceled) {
error_vec[i] = 1
}
}
mean(error_vec)
error_vec = rep(0,nrow(CancelledFlights))
for (i in 1:dim(CancelledFlights)[1] ){
lda.fit = lda(Canceled ~ ., data =CancelledFlights[-i,])
pos_prob = predict(lda.fit, CancelledFlights[i,],type = "response")
if(pos_prob > 0.5)
{
predicted_value = 1
}else{
predicted_value = 0
}
if(predicted_value!=CancelledFlights[i,]$Canceled) {
error_vec[i] = 1
}
}
mean(error_vec)
lda.fit = lda(Canceled ~ ., data = CancelledFlights[-1,], family = binomial)
predict(lda.fit, CancelledFlights[1, ], type = "response") == CancelledFlights[1,]$Canceled
predict(lda.fit, CancelledFlights[1, ], type = "response")
plot(lda.fit)
lda.fit = lda(Canceled ~ ., data = CancelledFlights[-1,])
plot(lda.fit)
lda.fit = lda(Canceled ~ ., data = CancelledFlights[-1,])
predict(lda.fit, CancelledFlights[1, ], type = "response")
predict(lda.fit, CancelledFlights[1, ])
predict(lda.fit, CancelledFlights[1, ])$class
predict(lda.fit, CancelledFlights[1, ])$class ==0
predict(lda.fit, CancelledFlights[1, ])$class ==1
lda.fit = lda(Canceled ~ ., data = CancelledFlights[-50,])
predict(lda.fit, CancelledFlights[50, ])$class ==1
lda.fit = lda(Canceled ~ ., data = CancelledFlights[-25,])
predict(lda.fit, CancelledFlights[25, ])$class ==1
error_vec = rep(0,nrow(CancelledFlights))
predict(lda.fit, CancelledFlights[25, ])$posterior
predict(lda.fit, CancelledFlights[25, ])$posterior[0]
predict(lda.fit, CancelledFlights[25, ])$posterior
predict(lda.fit, CancelledFlights[25, ])$posterior[1,]
predict(lda.fit, CancelledFlights[25, ])$posterior[1,]$0
predict(lda.fit, CancelledFlights[25, ])$posterior[1,]
predict(lda.fit, CancelledFlights[25, ])$posterior[,1]
source('~/Personal/Data_science_experiments/Interviewee Materials/Flight_delays.R', echo=TRUE)
error_vec = rep(0,nrow(CancelledFlights))
for (i in 1:dim(CancelledFlights)[1] ){
lda.fit = lda(Canceled ~ ., data =CancelledFlights[-i,])
pos_prob =predict(lda.fit, CancelledFlights[i, ])$posterior[,1]
if(pos_prob > 0.5)
{
predicted_value = 1
}else{
predicted_value = 0
}
if(predicted_value!=CancelledFlights[i,]$Canceled) {
error_vec[i] = 1
}
}
mean(error_vec)
k = 10
set.seed(1)
k = 10
set.seed(1)
folds = sample(1:k, nrow(CancelledFlights), replace = TRUE)
for (j in 1:k ){
glm.fit = glm(Canceled ~ ., data =CancelledFlights[folds!= j,],family = binomial)
pos_prob = predict(glm.fit, CancelledFlights[i,],type = "response")
}
error_vec = rep(0,nrow(CancelledFlights))
for (j in 1:k ){
glm.fit = glm(Canceled ~ ., data =CancelledFlights[folds!= j,],family = binomial)
}
predict(glm.fit, CancelledFlights[folds!= j,],type = "response")
nrow(predict(glm.fit, CancelledFlights[folds!= j,],type = "response"))
t=predict(glm.fit, CancelledFlights[folds!= j,],type = "response")
t[1]
t[2]
t[3]
t[4]
t[,1]
NROW(t)
folds
glm.fit = glm(Canceled ~ ., data =CancelledFlights[folds!= 1,],family = binomial)
predict(glm.fit, CancelledFlights[folds!= 1,],type = "response")
t=predict(glm.fit, CancelledFlights[folds!= 1,],type = "response")
nrow(t)
NROW(t)
folds ==1
nrow(folds == 1)
mean(folds==1)
t=predict(glm.fit, CancelledFlights[folds = 1,],type = "response")
t=predict(glm.fit, CancelledFlights[folds == 1,],type = "response")
NROW(t)
t[1]
t[2]
t
t[1]
t[0]
t[2]
dim(t)
nrow(t)
NROW(t)
glm.fit = glm(Canceled ~ ., data =CancelledFlights[folds!= 1,],family = binomial)
t=predict(glm.fit, CancelledFlights[folds == 1,],type = "response")
mean(t > 0.5)
error_vec = rep(0,nrow(CancelledFlights))
for (i in 1:dim(CancelledFlights)[1] ){
lda.fit = lda(Canceled ~ ., data =CancelledFlights[-i,])
pos_prob =predict(lda.fit, CancelledFlights[i, ])$posterior[,1]
if(pos_prob > 0.5)
{
predicted_value = 1
}else{
predicted_value = 0
}
if(predicted_value!=CancelledFlights[i,]$Canceled) {
error_vec[i] = 1
}
}
mean(error_vec)
predict_vec
t
t[1]
View(t)
t[2]
t[3]
folds
pred=predict(glm.fit, CancelledFlights[folds == 1,],type = "response")
pred > 0.5
CancelledFlights$Canceled[folds == 1]
CancelledFlights$Canceled[folds == 1][1]
CancelledFlights$Canceled[folds == 1][2]
pred=predict(glm.fit, CancelledFlights[folds == 1,],type = "response")
pred
pred[1]
pred[1][1]
pred[1][2]
pred[1][1,1]
pred[1,1]
pred[1,1]
pred[1]
pred[1] ==10
type(pred)
pred["10"]
pred["11"]
pred["27"]
glm.fit = glm(Canceled ~ ., data =CancelledFlights[folds!= 1,],family = binomial)
glm.pred=predict(glm.fit, CancelledFlights[folds == 1,],type = "response")
mean(folds==1)
glm.pred= rep(0,folds == 1)
glm.pred= rep(0, NROW(folds == 1))
glm.fit = glm(Canceled ~ ., data =CancelledFlights[folds!= 1,],family = binomial)
glm.probs=predict(glm.fit, CancelledFlights[folds == 1,],type = "response")
glm.fit = glm(Canceled ~ ., data =CancelledFlights[folds!= 1,],family = binomial)
glm.probs=predict(glm.fit, CancelledFlights[folds == 1,],type = "response")
glm.pred= rep(0, NROW(folds == 1))
glm.pred[glm.probs> 0.5] =1
mean(glm.pred == CancelledFlights$Canceled[folds == 1,])
mean(glm.pred == CancelledFlights[folds == 1,]$Canceled)
glm.fit = glm(Canceled ~ ., data =CancelledFlights[folds!= 1,],family = binomial)
glm.probs=predict(glm.fit, CancelledFlights[folds == 1,],type = "response")
glm.pred= rep(0, NROW(folds == 1))
glm.pred[glm.probs> 0.5] =1
mean(glm.pred == CancelledFlights[folds == 1,]$Canceled)
error_vec = rep(0,nrow(CancelledFlights))
for (i in 1:dim(CancelledFlights)[1] ){
qda.fit = qda(Canceled ~ ., data =CancelledFlights[-i,])
pos_prob =predict(qda.fit, CancelledFlights[i, ])$posterior[,1]
if(pos_prob > 0.5)
{
predicted_value = 1
}else{
predicted_value = 0
}
if(predicted_value!=CancelledFlights[i,]$Canceled) {
error_vec[i] = 1
}
}
mean(error_vec)
qda.fit = qda(Canceled ~ ., data =CancelledFlights[-1,])
qda.fit = qda(Canceled ~ ., data =CancelledFlights)
qda.fit = qda(Canceled ~ DepartureTime, data =CancelledFlights)
qda.fit = qda(Canceled ~ DepartureTime +UniqueCarrier , data =CancelledFlights)
qda.fit = qda(Canceled ~ . , data =CancelledFlights)
qda.fit = qda(Canceled ~ DepartureTime , data =CancelledFlights)
qda.fit = qda(Canceled ~ Month+ DepartureTime  + UniqueCarrier , data =CancelledFlights)
qda.fit = qda(Canceled ~ Month+ DepartureTime  + UniqueCarrier + SchedElapsedTime, data =CancelledFlights)
qda.fit = qda(Canceled ~ Month+ DepartureTime  + UniqueCarrier + SchedElapsedTime +ArrDelay
, data =CancelledFlights)
qda.fit = qda(Canceled ~ Month+ DepartureTime  + UniqueCarrier + SchedElapsedTime
, data =CancelledFlights)
error_vec = rep(0,nrow(CancelledFlights))
for (i in 1:dim(CancelledFlights)[1] ){
qda.fit = qda(Canceled ~ ., data =CancelledFlights[-i,])
pos_prob =predict(qda.fit, CancelledFlights[i, ])$posterior[,1]
if(pos_prob > 0.5)
{
predicted_value = 1
}else{
predicted_value = 0
}
if(predicted_value!=CancelledFlights[i,]$Canceled) {
error_vec[i] = 1
}
}
mean(error_vec)
error_vec = rep(0,nrow(CancelledFlights))
for (i in 1:dim(CancelledFlights)[1] ){
lda.fit = lda(Canceled ~ ., data =CancelledFlights[-i,])
pos_prob =predict(lda.fit, CancelledFlights[i, ])$posterior[,1]
if(pos_prob > 0.5)
{
predicted_value = 1
}else{
predicted_value = 0
}
if(predicted_value!=CancelledFlights[i,]$Canceled) {
error_vec[i] = 1
}
}
mean(error_vec)
error_vec = rep(0,nrow(CancelledFlights))
for (i in 1:dim(CancelledFlights)[1] ){
glm.fit = glm(Canceled ~ ., data =CancelledFlights[-i,],family = binomial)
pos_prob = predict(glm.fit, CancelledFlights[i,],type = "response")
if(pos_prob > 0.5)
{
predicted_value = 1
}else{
predicted_value = 0
}
if(predicted_value!=CancelledFlights[i,]$Canceled) {
error_vec[i] = 1
}
}
mean(error_vec)
lda.fit = lda(Canceled ~ ., data =CancelledFlights[-i,])
pos_prob =predict(lda.fit, CancelledFlights[i, ])$posterior[,1]
pos_prob
predict(lda.fit, CancelledFlights[i, ])$posterior
print('test')
print(mean(error_vec))
print('The Logistic MSE is : ')
print(mean(error_vec))
library(MASS)
set.seed(1)
# Reading the data
CancelledFlights <- read.csv(file="CancelledFlights.csv",head=FALSE,sep=",")
# adding column names
colnames(CancelledFlights) <- c("Canceled","Month","DepartureTime","UniqueCarrier","SchedElapsedTime","ArrDelay","DepDelay","Distance")
# Reading first few columns
head(CancelledFlights)
# checking if there is any na data
sum(is.na(CancelledFlights))
attach(CancelledFlights)
# some data exploration
table(Month,Canceled)
par(mfrow = c(1,2))
cancel_month <- table(Canceled,Month)
barplot(cancel_month, col=c("darkblue","red"),legend = rownames(cancel_month))
cancel_unique_carrier <- table(Canceled,UniqueCarrier)
barplot(cancel_unique_carrier, col=c("darkblue","red"),legend = rownames(cancel_unique_carrier))
error_vec = rep(0,nrow(CancelledFlights))
for (i in 1:dim(CancelledFlights)[1] ){
glm.fit = glm(Canceled ~ ., data =CancelledFlights[-i,],family = binomial)
pos_prob = predict(glm.fit, CancelledFlights[i,],type = "response")
if(pos_prob > 0.5)
{
predicted_value = 1
}else{
predicted_value = 0
}
if(predicted_value!=CancelledFlights[i,]$Canceled) {
error_vec[i] = 1
}
}
print('The Logistic MSE is : ')
print(mean(error_vec))
### lda
error_vec = rep(0,nrow(CancelledFlights))
for (i in 1:dim(CancelledFlights)[1] ){
lda.fit = lda(Canceled ~ ., data =CancelledFlights[-i,])
pos_prob =predict(lda.fit, CancelledFlights[i, ])$posterior[,1]
if(pos_prob < 0.5)
{
predicted_value = 1
}else{
predicted_value = 0
}
if(predicted_value!=CancelledFlights[i,]$Canceled) {
error_vec[i] = 1
}
}
print('The LDA MSE is : ')
print(mean(error_vec))
summary(lda.fit)
lda.fit
summary(glm.fit)
library(ISLR)
library(leaps)
attach(Hitters)
library(glmnet)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
Hitters = na.omit(Hitters)
sum(is.na(Hitters))
regfit.full = regsubsets(Salary~.,Hitters)
summary(regfit.full)
regfit.full = regsubsets(Salary ~., data = Hitters, nvmax = 19)
reg.summary = summary(regfit.full)
names(reg.summary)
reg.summary$rsq
par(mfrow = c(2,2))
plot(reg.summary$rss, xlab = "Number of variables", ylab = "RSS", type = "l")
plot(reg.summary$adjr2, xlab = "Number of Variables" , ylab = "Adjusted Rsq", type = "l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col = "red",cex = 2,pch = 20)
plot(reg.summary$cp, xlab = " No of Variables", ylab = "Cp", type = "l")
which.min(reg.summary$cp)
points(10,reg.summary$cp[10], col = "red",cex = 2,pch = 20)
plot(reg.summary$bic, xlab = " No of Variables", ylab = "BIC", type = "l")
which.min(reg.summary$bic)
points(6,reg.summary$bic[6], col = "red",cex = 2,pch = 20)
?plot.regsubsets
plot(regfit.full, scale = "r2")
plot(regfit.full, scale = "adjr2")
plot(regfit.full, scale = "Cp")
plot(regfit.full, scale = "bic")
coef(regfit.full,6)
###
regfit.fwd = regsubsets(Salary ~.,data = Hitters, nvmax = 19, method = "forward")
summary(regfit.fwd)
regfit.bwd = regsubsets(Salary ~.,data = Hitters, nvmax = 19, method = "backward")
summary(regfit.bwd)
coef(regfit.full,7)
coef(regfit.fwd,7)
coef(regfit.bwd,7)
# Choosing Among models using the validation set approach
set.seed(1)
train = sample(c(TRUE, FALSE), nrow(Hitters), rep = TRUE)
test = (!train)
regfit.best = regsubsets(Salary ~., data = Hitters[train,], nvmax = 19)
test.mat = model.matrix(Salary~., data = Hitters[test, ])
val.errors = rep(NA,19)
for (i in 1:19){
coefi = coef(regfit.best, id =i)
pred = test.mat[, names(coefi)]%*%coefi
val.errors[i] = mean((Hitters$Salary[test] - pred)^2)
}
View(Hitters)
predict.regsubsets = function(object, newdata, id,...){
form = as.formula(object$call[[2]])
mat = model.matrix(form, newdata)
coefi = coef(object, id =id)
xvars = names(coefi)
mat[,xvars]%*%coefi
}
regfit.best = regsubsets(Salary~., data = Hitters, nvmax = 19)
coef(regfit.best, 10)
k =10
set.seed(1)
folds = sample(1:k, nrow(Hitters), replace = TRUE)
cv.errors = matrix(NA, k,19, dimnames = list(NULL,paste(1:19)))
for (j in 1:k){
best.fit = regsubsets(Salary ~., data = Hitters[folds!= j, ], nvmax = 19 )
for( i in 1:19){
pred = predict(best.fit, Hitters[folds == j,],id = i)
cv.errors[j,i] = mean((Hitters$Salary[folds ==j] - pred)^2)
}
}
mean.cv.errors = apply(cv.errors,2,mean)
mean.cv.errors
par(mfrow = c(1,1))
plot(mean.cv.errors,type = 'b')
reg.best = regsubsets(Salary ~., data = Hitters, nvmax = 19)
coef(reg.best,11)
x = model.matrix(Salary~., Hitters)[,-1]
y = Hitters$Salary
grid = 10^ seq(10,-2, length = 100)
ridge.mod = glmnet(x,y ,alpha = 0, lambda = grid)
dim(coef(ridge.mod))
ridge.mod$lambda[50]
coef(ridge.mod)[,50]
ridge.mod$lambda[60]
coef(ridge.mod)[,60]
predict(ridge.mod, s= 50, type ="coefficients")[1:20]
set.seed(1)
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
y.test = y[test]
ridge.pred = predict(ridge.mod, s = 4 , newx[test, ])
ridge.mod = glmnet( x[train, ], y[train] , alpha = 0, lambda = grid, thresh = 1e-12)
ridge.pred = predict(ridge.mod, s = 4 , newx = x[test, ])
mean((ridge.pred - y.test)^2)
mean((mean(y[train]) - y.test)^2)
ridge.pred = predict(ridge.mod, s = 1e10, newx = x[test, ])
mean((ridge.pred - y.test)^2)
grid = 10^ seq(10,-2, length = 100)
grid = 10^ seq(10,-2, length = 100)
grid = 10^ seq(10,-2, length = 100)
ridge.mod = glmnet(x,y ,alpha = 0, lambda = grid)
dim(coef(ridge.mod))
ridge.mod$lambda[50]
coef(ridge.mod)[,50]
ridge.mod$lambda[60]
coef(ridge.mod)[,60]
predict(ridge.mod, s= 50, type ="coefficients")[1:20]
set.seed(1)
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
y.test = y[test]
ridge.mod = glmnet( x[train, ], y[train] , alpha = 0, lambda = grid, thresh = 1e-12)
source('~/Personal/Stat_learning/Chater6_lab.R', echo=TRUE)
ridge.pred = predict(ridge.mod, s = 4 , newx = x[test, ])
mean((ridge.pred - y.test)^2)
mean((mean(y[train]) - y.test)^2)
ridge.pred = predict(ridge.mod, s = 1e10, newx = x[test, ])
mean((ridge.pred - y.test)^2)
ridge.pred = predict(ridge.mod,s =0,newx = x[test,], exact = T)
mean((ridge.pred - y.test)^2)
lm(y ~x , subset = train)
predict(ridge.mod, s= 0,exact = T, type ="coefficients")[1:20, ]
cv.out = cv.glmnet(x[train,], y[train], alpha = 0)
plot(cv.out)
cv.out = cv.glmnet(x[train,], y[train], alpha = 0)
plot(cv.out)
plot(cv.out)
